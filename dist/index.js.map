{"version":3,"file":"index.js","sources":["../src/event-dispatcher.js","../src/browserbase.js"],"sourcesContent":["const slice = Array.prototype.slice;\n\n/**\n * Simple event dispatcher\n */\nexport default class EventDispatcher {\n\n  constructor() {\n    // Define a non-enumerable \"private\" property to hold all event listeners\n    Object.defineProperty(this, '_events', { configurable: true, writable: true, value: {} });\n  }\n\n  /**\n   * Adds an event listener\n   */\n  on(type, listener) {\n    this._events[type] = getEventListeners(this, type).concat([listener]);\n    return this;\n  }\n\n  /**\n   * Adds an event listener to be triggered only once\n   */\n  once(type, listener) {\n    this.on(type, function wrap() {\n      this.off(type, wrap);\n      listener.apply(this, arguments);\n    });\n    return this;\n  }\n\n  /**\n   * Removes a previously added event listener\n   */\n  off(type, listener) {\n    this._events[type] = getEventListeners(this, type).filter(function(l) {\n      return l !== listener;\n    });\n    return this;\n  }\n\n  /**\n   * Checks if there are any event listeners for this event\n   */\n  hasListeners(type) {\n    return getEventListeners(this, type).length > 0;\n  }\n\n  /**\n   * Dispatches an event calling all listeners with the given args (minus type).\n   */\n  dispatchEvent(type /*[, args]*/) {\n    var args = slice.call(arguments, 1);\n    getEventListeners(this, type).forEach(function(listener) {\n      listener.apply(this, args);\n    }, this);\n    return this;\n  }\n\n  /**\n   * Dispatches an event but stops on the first listener to return false. Returns true if no listeners cancel the\n   * action. Use for \"cancelable\" actions to check if they can be performed.\n   */\n  dispatchCancelableEvent(type /*[, args]*/) {\n    var args = slice.call(arguments, 1);\n    return getEventListeners(this, type).every(function(listener) {\n      return listener.apply(this, args) !== false;\n    }, this);\n  }\n\n  removeAllEvents() {\n    this._events = {};\n  }\n}\n\n\n/**\n * Get the listeners for the given object by the given event type.\n */\nfunction getEventListeners(obj, type) {\n  var listeners = obj._events[type];\n  if (!listeners) {\n    obj._events[type] = listeners = [];\n  }\n  return listeners;\n}\n","import EventDispatcher from './event-dispatcher';\nconst maxString = String.fromCharCode(65535);\nconst noop = data => data;\n\n\n/**\n * A nice promise-based syntax on indexedDB also providing events when open, closed, and whenever data is changed.\n * Dispatches the change events even when the change did not originate in this browser tab.\n *\n * Versioning is simplified. You provide a string of new indexes for each new version, with the first being the primary\n * key. For primary keys, use a \"++\" prefix to indicate auto-increment, leave it empty if the key isn't part of the\n * object. For indexes, use a \"-\" index to delete a defined index, use \"&\" to indicate a unique index, use \"*\" for a\n * multiEntry index, and use \"[field + anotherField]\" for compound indexes. Examples:\n *\n * // Initial version, should remain the same with updates\n * db.version(1, {\n *   friends: 'fullName, age'\n * });\n *\n * // Next version, we don't add any indexes, but we want to run our own update code to prepopulate the database\n * db.version(2, {}, function(oldVersion, transaction) {\n *   // prepopulate with some initial data\n *   transaction.objectStore('friends').put({ fullName: 'Tom' });\n * });\n *\n * // Remove the age index and add one for birthdate, add another object store with an auto-incrementing primary key\n * // that isn't part of the object, and a multiEntry index on the labels array.\n * db.version(3, {\n *   friends: 'birthdate, -age, [lastName + firstName]',\n *   events: '++, date, *labels'\n * });\n *\n *\n * After the database is opened, a property will be added to the database instance for each object store in the\n * database. This is how you will work with the data in the database. For e.g.\n *\n * db.version(1, { foo: 'id' });\n *\n * // Will be triggered once for any add, put, or delete done in any browser tab. The object will be null when it was\n * // deleted, so use the key when object is null.\n * db.on('change', (object, key) => {\n *   console.log('Object with key', key, 'was', object === null ? 'deleted' : 'saved');\n * });\n *\n * db.open().then(() => {\n *   db.foo.put({ id: 'bar' }).then(() => {\n *     console.log('An object was saved to the database.');\n *   });\n * }, err => {\n *   console.warn('There was an error opening the database:', err);\n * });\n */\nexport default class Browserbase extends EventDispatcher {\n\n  /**\n   * Deletes a database by name.\n   * @return {Promise}\n   */\n  static deleteDatabase(name) {\n    return requestToPromise(indexedDB.deleteDatabase(name));\n  }\n\n  /**\n   * Creates a new indexeddb database with the given name.\n   * @param  {String} name           The name of the database, stored in IndexedDB\n   * @param  {Object} options        Options for this database.\n   * @param           {Boolean} dontDispatch      If true, don't use localStorage to dispatch events across tabs. Use\n   *                                              this if using Browserbase in a worker for e.g.\n   */\n  constructor(name, options) {\n    super();\n    this.name = name;\n    this.db = null;\n    this.options = options || {};\n    this._dispatchRemote = false;\n    this._current = null;\n    this._versionMap = {};\n    this._versionHandlers = {};\n    this._onStorage = null;\n    this._storageEvents = {};\n  }\n\n  /**\n   * Defines a version for the database. Additional versions may be added, but existing version should not be changed.\n   * @param  {Number} version           The version number\n   * @param  {Object} stores            An object with store name as the key and a comma-delimited string of indexes\n   * @param  {Function} upgradeFunction An optional function that will be called when upgrading, used for data updates\n   * @return {Browserbase}              A reference to itself\n   */\n  version(version, stores, upgradeFunction) {\n    this._versionMap[version] = stores;\n    if (upgradeFunction) {\n      this._versionHandlers[version] = upgradeFunction;\n    }\n    return this;\n  }\n\n  /**\n   * Returns a list of the defined versions.\n   */\n  getVersions() {\n    return Object.keys(this._versionMap).map(key => {\n      return { version: parseInt(key), stores: this._versionMap[key], upgradeFunction: this._versionHandlers[key] };\n    });\n  }\n\n  /**\n   * Whether this database is open or closed.\n   * @return {Boolean}\n   */\n  isOpen() {\n    return Boolean(this.db);\n  }\n\n  /**\n   * Open a database, call this after defining versions.\n   * @return {Promise}\n   */\n  open() {\n    if (this._opening) {\n      return this._opening;\n    }\n\n    if (!Object.keys(this._versionMap).length) {\n      return Promise.reject(new Error('Must declare at least a version 1 schema for Browserbase'));\n    }\n\n    let version = Object.keys(this._versionMap).map(key => parseInt(key)).sort((a, b) => a - b).pop();\n    let upgradedFrom = null;\n\n    return this._opening = new Promise((resolve, reject) => {\n      let request = indexedDB.open(this.name, version);\n      request.onsuccess = successHandler(resolve);\n      request.onerror = errorHandler(reject, this);\n      request.onupgradeneeded = event => {\n        this.db = request.result;\n        this.db.onerror = errorHandler(reject, this);\n        this.db.onabort = errorHandler(() => reject(new Error('Abort')), this);\n        let oldVersion = event.oldVersion > Math.pow(2, 62) ? 0 : event.oldVersion; // Safari 8 fix.\n        upgradedFrom = oldVersion;\n        upgrade(oldVersion, request.transaction, this.db, this._versionMap, this._versionHandlers, this);\n      };\n    }).then(db => {\n      this.db = db;\n      onOpen(this);\n      if (upgradedFrom === 0) this.dispatchEvent('create');\n      else if (upgradedFrom) this.dispatchEvent('upgrade', upgradedFrom);\n      this.dispatchEvent('open');\n    });\n  }\n\n  /**\n   * Closes the database.\n   */\n  close() {\n    if (!this.db) return;\n    this.db.close();\n    this._opening = undefined;\n    onClose(this);\n  }\n\n  /**\n   * Deletes this database.\n   */\n  deleteDatabase() {\n    this.close();\n    return Browserbase.deleteDatabase(this.name);\n  }\n\n  /**\n   * Starts a multi-store transaction. All store methods on the returned database clone will be part of this transaction\n   * until the next tick or until calling db.commit().\n   * @param  {Array} storeNames  Array of all the store names which will be used within this transaction\n   * @param  {String} mode       The mode, defaults to readwrite unlike the indexedDB API\n   * @return {BrowserDB}         A temporary copy of BrowserDB to be used for this transaction only\n   */\n  start(storeNames, mode = 'readwrite') {\n    if (!storeNames) storeNames = this.db.objectStoreNames;\n    if (this._current) throw new Error('Cannot start a new transaction on an existing transaction browserbase');\n\n    const db = new this.constructor(this.name, this);\n    db.db = this.db;\n    Object.keys(this).forEach(key => {\n      const store = this[key];\n      if (!(store instanceof ObjectStore)) return;\n      db[key] = new ObjectStore(db, store.name, store.keyPath);\n      db[key].store = store.store;\n      db[key].revive = store.revive;\n    });\n\n    try {\n      const trans = db._current = storeNames instanceof IDBTransaction\n        ? storeNames\n        : this.db.transaction(safariMultiStoreFix(storeNames), mode);\n      trans.promise = requestToPromise(trans, null, db).then(result => {\n        if (db._current === trans) db._current = null;\n        return result;\n      }, err => {\n        if (db._current === trans) db._current = null;\n        this.dispatchEvent('error', err);\n        return Promise.reject(err);\n      });\n    } catch (err) {\n      Promise.resolve().then(() => {\n        this.dispatchEvent('error', err);\n      });\n      throw err;\n    }\n\n    return db;\n  }\n\n  /**\n   * Finishes a started transaction so that other transactions may be run. This is not needed for a transaction to run,\n   * but it allows other transactions to be run in this thread. It ought to be called to avoid conflicts with other\n   * code elsewhere.\n   * @return {Promise} The same promise returned by start() which will resolve once the transaction is done.\n   */\n  commit(options) {\n    if (!this._current) throw new Error('There is no current transaction to commit.');\n    const promise = this._current.promise;\n    if (options && options.remoteChange) {\n      this._dispatchRemote = true;\n      promise.then(() => this._dispatchRemote = false);\n    }\n    this._current = null;\n    return promise;\n  }\n\n  /**\n   * Dispatches a change event when an object is being added, saved, or deleted. When deleted, the object will be null.\n   * @param {ObjectStore} store  The object store this object is stored in\n   * @param {Object}      obj    The object being modified or null if the object is deleted\n   * @param {mixed}       key    The key of the object being changed or deleted\n   * @param {String}      from   The source of this event, whether it was from the 'local' scope or a 'remote' scope\n   */\n  dispatchChange(store, obj, key, from = 'local', dispatchRemote = false) {\n    const declaredFrom = this._dispatchRemote || dispatchRemote ? 'remote' : from;\n    this[store.name].dispatchEvent('change', obj, key, declaredFrom);\n    this.dispatchEvent('change', store.name, obj, key, declaredFrom);\n\n    if (from === 'local' && !this.options.dontDispatch) {\n      const id = createId();\n      let itemKey = `browserbase/${this.name}/${store.name}/${id}`;\n      // Stringify the key since it could be a string, number, or even an array\n      this._storageEvents[id] = true;\n      setTimeout(() => delete this._storageEvents[id], 2000);\n      localStorage.setItem(itemKey, JSON.stringify(key));\n      localStorage.removeItem(itemKey);\n    }\n  }\n\n  /**\n   * Dispatch an error event.\n   */\n  dispatchError(err) {\n    this.dispatchEvent('error', err);\n  }\n\n  /**\n   * Creates or updates a store with the given indexesString. If null will delete the store.\n   * @param  {String} storeName     The store name\n   * @param  {String} indexesString The string definition of the indexes to add to the store\n   * @return {Promise}           Resolves with an array which is the return result of each iteration\n   */\n  upgradeStore(storeName, indexesString) {\n    if (!this._current) return this.start().upgradeStore(storeName, indexesString);\n    upgradeStore(this.db, this._current, storeName, indexesString);\n  }\n\n}\n\n\n/**\n * An abstraction on object stores, allowing to more easily work with them without needing to always explicitly create a\n * transaction first. Also helps with ranges and indexes and promises.\n */\nclass ObjectStore extends EventDispatcher {\n\n  constructor(db, name, keyPath) {\n    super();\n    this.db = db;\n    this.name = name;\n    this.keyPath = keyPath;\n    this.store = noop;\n    this.revive = noop;\n  }\n\n  _transStore(mode) {\n    if (!this.db._current && !this.db.db) {\n      throw new Error('Database is not opened');\n    }\n    try {\n      let trans = this.db._current || this.db.db.transaction(this.name, mode);\n      return trans.objectStore(this.name);\n    } catch (err) {\n      Promise.resolve().then(() => {\n        this.db.dispatchEvent('error', err);\n      });\n      throw err;\n    }\n  }\n\n  /**\n   * Dispatches a change event.\n   */\n  dispatchChange(obj, key) {\n    this.db.dispatchChange(this, obj, key);\n  }\n\n  /**\n   * Dispatch an error event.\n   */\n  dispatchError(err) {\n    this.db.dispatchError(err);\n  }\n\n  /**\n   * Get an object from the store by its primary key\n   * @param  {mixed} id The key of the object being retreived\n   * @return {Promise}  Resolves with the object being retreived\n   */\n  get(key) {\n    return requestToPromise(this._transStore('readonly').get(key), null, this).then(this.revive);\n  }\n\n  /**\n   * Get all objects in this object store. To get only a range, use where()\n   * @return {Promise} Resolves with an array of objects\n   */\n  getAll() {\n    return requestToPromise(this._transStore('readonly').getAll(), null, this)\n      .then(results => results.map(this.revive));\n  }\n\n  /**\n   * Gets the count of all objects in this store\n   * @return {Promise} Resolves with a number\n   */\n  count() {\n    return requestToPromise(this._transStore('readonly').count(), null, this);\n  }\n\n  /**\n   * Adds an object to the store. If an object with the given key already exists, it will not overwrite it.\n   * @param {Object} obj The object you want to add to the store\n   * @param {mixed} key Optional, the key of the object when it is not part of the object fields\n   * @return {Promise}\n   */\n  add(obj, key) {\n    let store = this._transStore('readwrite');\n    return requestToPromise(store.add(this.store(obj), key), store.transaction, this).then(key => {\n      this.dispatchChange(obj, key);\n      return key;\n    });\n  }\n\n  /**\n   * Adds an array of objects to the store in once transaction. You can also call startTransaction and use add().\n   * @param {Array} array The array of objects you want to add to the store\n   * @return {Promise}\n   */\n  addAll(array) {\n    let store = this._transStore('readwrite');\n    return Promise.all(array.map(obj => {\n      return requestToPromise(store.add(this.store(obj)), store.transaction, this).then(key => {\n        this.dispatchChange(obj, key);\n      });\n    }));\n  }\n\n  /**\n   * Adds an array of objects to the store in once transaction. You can also call startTransaction and use add(). Alias\n   * of addAll().\n   * @param {Array} array The array of objects you want to add to the store\n   * @return {Promise}\n   */\n  bulkAdd(array) {\n    return this.addAll(array);\n  }\n\n  /**\n   * Saves an object to the store. If an object with the given key already exists, it will overwrite it.\n   * @param {Object} obj The object you want to add to the store\n   * @param {mixed} key Optional, the key of the object when it is not part of the object fields\n   * @return {Promise}\n   */\n  put(obj, key) {\n    let store = this._transStore('readwrite');\n    return requestToPromise(store.put(this.store(obj), key), store.transaction, this).then(key => {\n      this.dispatchChange(obj, key);\n      return key;\n    });\n  }\n\n  /**\n   * Saves an array of objects to the store in once transaction. You can also call startTransaction and use put().\n   * @param {Array} array The array of objects you want to save to the store\n   * @return {Promise}\n   */\n  putAll(array) {\n    let store = this._transStore('readwrite');\n    return Promise.all(array.map(obj => {\n      return requestToPromise(store.put(this.store(obj)), store.transaction, this).then(key => {\n        this.dispatchChange(obj, key);\n      });\n    }));\n  }\n\n  /**\n   * Saves an array of objects to the store in once transaction. You can also call startTransaction and use put(). Alias\n   * of putAll().\n   * @param {Array} array The array of objects you want to save to the store\n   * @return {Promise}\n   */\n  bulkPut(array) {\n    return this.putAll(array);\n  }\n\n  /**\n   * Deletes an object from the store.\n   * @param {mixed} key The key of the object to delete.\n   * @return {Promise}\n   */\n  delete(key) {\n    let store = this._transStore('readwrite');\n    return requestToPromise(store.delete(key), store.transaction, this).then(() => {\n      this.dispatchChange(null, key);\n    });\n  }\n\n  /**\n   * Deletes all objects from a store.\n   * @return {Promise}\n   */\n  deleteAll() {\n    return this.where().deleteAll();\n  }\n\n  /**\n   * Use to get a subset of items from the store by id or index. Returns a Where object to allow setting the range and\n   * limit.\n   * @param  {String} index The key or index that will be used to retreive the range of objects\n   * @return {Where}        A Where instance associated with this object store\n   */\n  where(index = '') {\n    index = index.replace(/\\s/g, '');\n    return new Where(this, index === this.keyPath ? '' : index);\n  }\n}\n\n\n/**\n * Helps with a ranged getAll or openCursor by helping to create the range and providing a nicer API with returning a\n * promise or iterating through with a callback.\n */\nclass Where {\n  constructor(store, index) {\n    this.store = store;\n    this.index = index;\n    this._upper = undefined;\n    this._lower = undefined;\n    this._upperOpen = false;\n    this._lowerOpen = false;\n    this._value = undefined;\n    this._limit = undefined;\n    this._direction = 'next';\n  }\n\n  /**\n   * Dispatches a change event.\n   */\n  dispatchChange(obj, key) {\n    this.store.dispatchChange(obj, key);\n  }\n\n  /**\n   * Dispatch an error event.\n   */\n  dispatchError(err) {\n    this.store.dispatchError(err);\n  }\n\n  /**\n   * Set greater than the value provided.\n   * @param  {mixed} value The lower bound\n   * @return {Where}       Reference to this\n   */\n  startsAfter(value) {\n    this._lower = value;\n    this._lowerOpen = true;\n    return this;\n  }\n\n  /**\n   * Set greater than or equal to the value provided.\n   * @param  {mixed} value The lower bound\n   * @return {Where}       Reference to this\n   */\n  startsAt(value) {\n    this._lower = value;\n    this._lowerOpen = false;\n    return this;\n  }\n\n  /**\n   * Set less than the value provided.\n   * @param  {mixed} value The upper bound\n   * @return {Where}       Reference to this\n   */\n  endsBefore(value) {\n    this._upper = value;\n    this._upperOpen = true;\n    return this;\n  }\n\n  /**\n   * Set less than or equal to the value provided.\n   * @param  {mixed} value The upper bound\n   * @return {Where}       Reference to this\n   */\n  endsAt(value) {\n    this._upper = value;\n    this._upperOpen = false;\n    return this;\n  }\n\n  /**\n   * Set the exact match, no range.\n   * @param  {mixed} value The value that needs matching on\n   * @return {Where}       Reference to this\n   */\n  equals(value) {\n    this._value = value;\n    return this;\n  }\n\n  /**\n   * Sets the upper and lower bounds to match any string starting with this prefix.\n   * @param  {String} prefix The string prefix\n   * @return {Where}         Reference to this\n   */\n  startsWith(prefix) {\n    return this.startsAt(prefix).endsAt(Array.isArray(prefix) ? prefix.concat([[]]) : prefix + maxString);\n  }\n\n  /**\n   * Limit the return results to the given count.\n   * @param  {Number} count The max number of objects to return\n   * @return {Where}        Reference to this\n   */\n  limit(count) {\n    this._limit = count;\n    return this;\n  }\n\n  /**\n   * Reverses the direction a cursor will get things.\n   * @return {Where} Reference to this\n   */\n  reverse() {\n    this._direction = 'prev';\n    return this;\n  }\n\n  /**\n   * Converts this Where to its IDBKeyRange equivalent.\n   * @return {IDBKeyRange} The range this Where represents\n   */\n  toRange() {\n    if (this._upper !== undefined && this._lower !== undefined) {\n      return IDBKeyRange.bound(this._lower, this._upper, this._lowerOpen, this._upperOpen);\n    } else if (this._upper !== undefined) {\n      return IDBKeyRange.upperBound(this._upper, this._upperOpen);\n    } else if (this._lower !== undefined) {\n      return IDBKeyRange.lowerBound(this._lower, this._lowerOpen);\n    } else if (this._value !== undefined) {\n      return IDBKeyRange.only(this._value);\n    }\n  }\n\n  /**\n   * Get all the objects matching the range limited by the limit.\n   * @return {Promise} Resolves with an array of objects\n   */\n  getAll() {\n    let range = this.toRange();\n    // Handle reverse with cursor\n    if (this._direction === 'prev') {\n      let results = [];\n      if (this._limit <= 0) return Promise.resolve(results);\n      return this.forEach(obj => results.push(this.store.revive(obj))).then(() => results);\n    }\n\n    let store = this.store._transStore('readonly');\n    let source = this.index ? store.index(this.index) : store;\n    return requestToPromise(source.getAll(range, this._limit), null, this)\n      .then(results => results.map(this.store.revive));\n  }\n\n  /**\n   * Get all the keys matching the range limited by the limit.\n   * @return {Promise} Resolves with an array of objects\n   */\n  getAllKeys() {\n    let range = this.toRange();\n    // Handle reverse with cursor\n    if (this._direction === 'prev') {\n      let results = [];\n      if (this._limit <= 0) return Promise.resolve(results);\n      return this.cursor(cursor => results.push(cursor.key), 'readonly', true).then(() => results);\n    }\n\n    let store = this.store._transStore('readonly');\n    let source = this.index ? store.index(this.index) : store;\n    return requestToPromise(source.getAllKeys(range, this._limit), null, this);\n  }\n\n  /**\n   * Gets a single object, the first one matching the criteria\n   * @return {Promise} Resolves with an object or undefined if none was found\n   */\n  get() {\n    return this.limit(1).getAll().then(result => this.store.revive(result[0]));\n  }\n\n  /**\n   * Gets a single key, the first one matching the criteria\n   * @return {Promise} Resolves with an object or undefined if none was found\n   */\n  getKey() {\n    // Allow reverse() to be used by going through the getAllKeys method\n    return this.limit(1).getAllKeys().then(result => result[0]);\n  }\n\n  /**\n   * Gets the count of the objects matching the criteria\n   * @return {Promise} Resolves with a number\n   */\n  count() {\n    let range = this.toRange();\n    let store = this.store._transStore('readonly');\n    let source = this.index ? store.index(this.index) : store;\n    return requestToPromise(source.count(range), null, this);\n  }\n\n  /**\n   * Deletes all the objects within this range.\n   * @return {Promise} Resolves without result when finished\n   */\n  deleteAll() {\n    // Uses a cursor to delete so that each item can get a change event dispatched for it\n    return this.map((object, cursor, trans) => {\n      let key = cursor.primaryKey;\n      return requestToPromise(cursor.delete(), trans, this).then(() => {\n        this.dispatchChange(null, key);\n      });\n    }, 'readwrite').then(promises => Promise.all(promises)).then(() => {});\n  }\n\n  /**\n   * Uses a cursor to efficiently iterate over the objects matching the range calling the iterator for each one.\n   * @param  {Function} iterator A function which will be called for each object with the (object, cursor) signature\n   * @return {Promise}           Resolves without result when the cursor has finished\n   */\n  cursor(iterator, mode = 'readonly', keyCursor = false) {\n    return new Promise((resolve, reject) => {\n      let range = this.toRange();\n      let store = this.store._transStore(mode);\n      let source = this.index ? store.index(this.index) : store;\n      let method = keyCursor ? 'openKeyCursor' : 'openCursor'\n      let request = source[method](range, this._direction);\n      let count = 0;\n      request.onsuccess = event => {\n        var cursor = event.target.result;\n        if (cursor) {\n          let result = iterator(cursor, store.transaction);\n          if (this._limit !== undefined && ++count >= this._limit) result = false;\n          if (result !== false) cursor.continue();\n          else resolve();\n        } else {\n          resolve();\n        }\n      };\n      request.onerror = errorHandler(reject, this);\n    });\n  }\n\n  /**\n   * Updates objects using a cursor to update many objects at once matching the range.\n   * @param  {Function} iterator A function which will be called for each object and which should return the new value\n   * for the object, undefined if no changes should be made, or null if the object should be deleted.\n   * @return {Promise}           Resolves without result when finished\n   */\n  update(iterator) {\n    const { store, revive } = this.store;\n    return this.map((object, cursor, trans) => {\n      let key = cursor.primaryKey;\n      let newValue = iterator(object, cursor);\n      if (newValue === null) {\n        return requestToPromise(cursor.delete(), trans, this).then(() => {\n          this.dispatchChange(null, key);\n        });\n      } else if (newValue !== undefined) {\n        return requestToPromise(cursor.update(this.store.store(newValue)), trans, this).then(() => {\n          this.dispatchChange(newValue, key);\n        });\n      } else {\n        return undefined;\n      }\n    }, 'readwrite').then(promises => Promise.all(promises)).then(() => {});\n  }\n\n  /**\n   * Uses a cursor to efficiently iterate over the objects matching the range calling the iterator for each one.\n   * @param  {Function} iterator A function which will be called for each object with the (object, cursor) signature\n   * @return {Promise}           Resolves without result when the cursor has finished\n   */\n  forEach(iterator, mode = 'readonly') {\n    return this.cursor((cursor, trans) => {\n      iterator(this.store.revive(cursor.value), cursor, trans);\n    }, mode);\n  }\n\n  /**\n   * Uses a cursor to efficiently iterate over the objects matching the range calling the iterator for each one and\n   * returning the results of the iterator in an array.\n   * @param  {Function} iterator A function which will be called for each object with the (object, cursor) signature\n   * @return {Promise}           Resolves with an array which is the return result of each iteration\n   */\n  map(iterator, mode = 'readonly') {\n    let results = [];\n    return this.forEach((object, cursor, trans) => {\n      results.push(iterator(object, cursor, trans));\n    }, mode).then(() => results);\n  }\n}\n\n\n\nfunction requestToPromise(request, transaction, errorDispatcher) {\n  return new Promise((resolve, reject) => {\n    if (transaction) {\n      if (!transaction.promise) transaction.promise = requestToPromise(transaction, null, errorDispatcher);\n      transaction.promise = transaction.promise.then(() => resolve(request.result), err => {\n        let requestError;\n        try { requestError = request.error } catch(e) {}\n        reject(requestError || err);\n        return Promise.reject(err);\n      });\n    } else if (request.onsuccess === null) {\n      request.onsuccess = successHandler(resolve);\n    }\n    if (request.oncomplete === null) request.oncomplete = successHandler(resolve);\n    if (request.onerror === null) request.onerror = errorHandler(reject, errorDispatcher);\n    if (request.onabort === null) request.onabort = () => reject(new Error('Abort'));\n  });\n}\n\nfunction successHandler(resolve) {\n  return event => resolve(event.target.result);\n}\n\nfunction errorHandler(reject, errorDispatcher) {\n  return event => {\n    reject(event.target.error);\n    errorDispatcher && errorDispatcher.dispatchError(event.target.error);\n  };\n}\n\nfunction safariMultiStoreFix(storeNames) {\n  return storeNames.length === 1 ? storeNames[0] : storeNames;\n}\n\n\nfunction upgrade(oldVersion, transaction, db, versionMap, versionHandlers, browserbase) {\n  let versions;\n  // Optimization for creating a new database. A version 0 may be used as the \"latest\" version to create a database.\n  if (oldVersion === 0 && versionMap[0]) {\n    versions = [ 0 ];\n  } else {\n    versions = Object.keys(versionMap)\n      .map(key => parseInt(key))\n      .filter(version => version > oldVersion)\n      .sort((a, b) => a - b);\n  }\n\n  versions.forEach(version => {\n    const stores = versionMap[version];\n    Object.keys(stores).forEach(name => {\n      const indexesString = stores[name];\n      upgradeStore(db, transaction, name, indexesString);\n    });\n\n    const handler = versionHandlers[version];\n    if (handler) {\n      // Ensure browserbase has the current object stores for working with in the handler\n      addStores(browserbase, db, transaction);\n      handler(oldVersion, transaction);\n    }\n  });\n}\n\n\nfunction upgradeStore(db, transaction, storeName, indexesString) {\n  const indexes = indexesString && indexesString.split(/\\s*,\\s*/);\n  let store;\n\n  if (indexesString === null) {\n    db.deleteObjectStore(storeName);\n    return;\n  }\n\n  if (db.objectStoreNames.contains(storeName)) {\n    store = transaction.objectStore(storeName);\n  } else {\n    store = db.createObjectStore(storeName, getStoreOptions(indexes.shift()));\n  }\n\n  indexes.forEach(name => {\n    if (!name) return;\n    if (name[0] === '-') return store.deleteIndex(name.replace(/^-[&*]?/, ''));\n\n    let options = {};\n\n    name = name.replace(/\\s/g, '');\n    if (name[0] === '&') {\n      name = name.slice(1);\n      options.unique = true;\n    } else if (name[0] === '*') {\n      name = name.slice(1);\n      options.multiEntry = true;\n    }\n    let keyPath = name[0] === '[' ? name.replace(/^\\[|\\]$/g, '').split(/\\+/) : name;\n    store.createIndex(name, keyPath, options);\n  });\n}\n\n\nfunction onOpen(browserbase) {\n  const db = browserbase.db;\n\n  db.onversionchange = event => {\n    if (browserbase.dispatchCancelableEvent('versionchange')) {\n      if (event.newVersion > 0) {\n        console.warn(`Another connection wants to upgrade database '${browserbase.name}'. Closing db now to resume the upgrade.`);\n      } else {\n        console.warn(`Another connection wants to delete database '${browserbase.name}'. Closing db now to resume the delete request.`);\n      }\n      browserbase.close();\n    }\n  };\n  db.onblocked = event => {\n    if (browserbase.dispatchCancelableEvent('blocked')) {\n      if (!event.newVersion || event.newVersion < event.oldVersion) {\n        console.warn(`Browserbase.delete('${browserbase.name}') was blocked`);\n      } else {\n        console.warn(`Upgrade '${browserbase.name}' blocked by other connection holding version ${event.oldVersion}`);\n      }\n    }\n  };\n  db.onclose = () => onClose(browserbase);\n  db.onerror = event => browserbase.dispatchEvent('error', event.target.error);\n  if (!browserbase.options.dontDispatch) {\n    const prefix = `browserbase/${browserbase.name}/`;\n    browserbase._onStorage = event => {\n      if (event.storageArea !== localStorage) return;\n      if (event.newValue === null || event.newValue === '') return;\n      if (event.key.slice(0, prefix.length) !== prefix) return;\n      if (browserbase._storageEvents[event.key.split('/').pop()]) return; // Safari fix, dispatches to own tab\n      try {\n        const storeName = event.key.replace(prefix, '').split('/')[0];\n        const key = JSON.parse(event.newValue);\n        const store = browserbase[storeName];\n        if (store) {\n          if (browserbase.hasListeners('change') || store.hasListeners('change')) {\n            store.get(key).then((object = null) => {\n              browserbase.dispatchChange(store, object, key, 'remote');\n            });\n          }\n        } else {\n          console.warn(`A change event came from another tab for store \"${storeName}\", but no such store exists.`);\n        }\n      } catch (err) {\n        console.warn('Error parsing object change from browserbase:', err);\n      }\n    };\n\n    addEventListener('storage', browserbase._onStorage);\n  }\n\n  // Store keyPath's for each store\n  addStores(browserbase, db, db.transaction(safariMultiStoreFix(db.objectStoreNames), 'readonly'));\n}\n\n\nfunction addStores(browserbase, db, transaction) {\n  const names = db.objectStoreNames;\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    browserbase[name] = new ObjectStore(browserbase, name, transaction.objectStore(name).keyPath);\n  }\n}\n\nfunction onClose(browserbase) {\n  removeEventListener('storage', browserbase._onStorage);\n  browserbase.db = null;\n  browserbase.dispatchEvent('close');\n}\n\nfunction getStoreOptions(keyString) {\n  let keyPath = keyString.replace(/\\s/g, '');\n  let storeOptions = {};\n  if (keyPath.slice(0, 2) === '++') {\n    keyPath = keyPath.replace('++', '');\n    storeOptions.autoIncrement = true;\n  } else if (keyPath[0] === '[') {\n    keyPath = keyPath.replace(/^\\[|\\]$/g, '').split(/\\+/);\n  }\n  if (keyPath) storeOptions.keyPath = keyPath;\n  return storeOptions;\n}\n\nconst chars = ('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz').split('');\n\nfunction createId() {\n  let length = 6;\n  let id = '';\n  while (length--) {\n    id += chars[Math.random() * chars.length | 0];\n  }\n  return id;\n}\n"],"names":["const","super","version","this","let","this$1"],"mappings":"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"}