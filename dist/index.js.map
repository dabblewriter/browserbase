{"version":3,"file":"index.js","sources":["../src/event-dispatcher.js","../src/browserdb.js"],"sourcesContent":["const slice = Array.prototype.slice;\n\n/**\n * Simple event dispatcher\n */\nexport default class EventDispatcher {\n\n  constructor() {\n    // Define a non-enumerable \"private\" property to hold all event listeners\n    Object.defineProperty(this, '_events', { configurable: true, writable: true, value: {} });\n  }\n\n  /**\n   * Adds an event listener\n   */\n  on(type, listener) {\n    this._events[type] = getEventListeners(this, type).concat([listener]);\n    return this;\n  }\n\n  /**\n   * Adds an event listener to be triggered only once\n   */\n  once(type, listener) {\n    this.on(type, function wrap() {\n      this.off(type, wrap);\n      listener.apply(this, arguments);\n    });\n    return this;\n  }\n\n  /**\n   * Removes a previously added event listener\n   */\n  off(type, listener) {\n    this._events[type] = getEventListeners(this, type).filter(function(l) {\n      return l !== listener;\n    });\n    return this;\n  }\n\n  /**\n   * Dispatches an event calling all listeners with the given args (minus type).\n   */\n  dispatchEvent(type /*[, args]*/) {\n    var args = slice.call(arguments, 1);\n    getEventListeners(this, type).forEach(function(listener) {\n      listener.apply(this, args);\n    }, this);\n    return this;\n  }\n\n  /**\n   * Dispatches an event but stops on the first listener to return false. Returns true if no listeners cancel the\n   * action. Use for \"cancelable\" actions to check if they can be performed.\n   */\n  dispatchCancelableEvent(type /*[, args]*/) {\n    var args = slice.call(arguments, 1);\n    return getEventListeners(this, type).every(function(listener) {\n      return listener.apply(this, args) !== false;\n    }, this);\n  }\n\n  removeAllEvents() {\n    this._events = {};\n  }\n}\n\n\n/**\n * Get the listeners for the given object by the given event type.\n */\nfunction getEventListeners(obj, type) {\n  var listeners = obj._events[type];\n  if (!listeners) {\n    obj._events[type] = listeners = [];\n  }\n  return listeners;\n}\n","import EventDispatcher from './event-dispatcher';\nconst maxString = String.fromCharCode(65535);\n\n\n/**\n * A nice promise-based syntax on indexedDB also providing events when open, closed, and whenever data is changed.\n * Dispatches the change events even when the change did not originate in this browser tab.\n *\n * Versioning is simplified. You provide a string of new indexes for each new version, with the first being the primary\n * key. For primary keys, use a \"++\" prefix to indicate auto-increment, leave it empty if the key isn't part of the\n * object. For indexes, use a \"-\" index to delete a defined index, use \"&\" to indicate a unique index, and use \"*\" for a\n * multiEntry index. Examples:\n *\n * // Initial version, should remain the same with updates\n * db.version(1, {\n *   friends: 'fullName, age'\n * });\n *\n * // Next version, we don't add any indexes, but we want to run our own update code to prepopulate the database\n * db.version(2, {}, function(oldVersion, transaction) {\n *   // prepopulate with some initial data\n *   transaction.objectStore('friends').put({ fullName: 'Tom' });\n * });\n *\n * // Remove the age index and add one for birthdate, add another object store with an auto-incrementing primary key\n * // that isn't part of the object, and a multiEntry index on the labels array.\n * db.version(3, {\n *   friends: 'birthdate, -age',\n *   events: '++, date, *labels'\n * });\n *\n *\n * After the database is opened, a property will be added to the database instance for each object store in the\n * database. This is how you will work with the data in the database. For e.g.\n *\n * db.version(1, { foo: 'id' });\n *\n * // Will be triggered once for any add, put, or delete done in any browser tab. The object will be null when it was\n * // deleted, so use the key when object is null.\n * db.on('change', (object, key) => {\n *   console.log('Object with key', key, 'was', object === null ? 'deleted' : 'saved');\n * });\n *\n * db.open().then(() => {\n *   db.foo.put({ id: 'bar' }).then(() => {\n *     console.log('An object was saved to the database.');\n *   });\n * }, err => {\n *   console.warn('There was an error opening the database:', err);\n * });\n */\nexport default class BrowserDB extends EventDispatcher {\n\n  /**\n   * Deletes a database by name.\n   * @return {Promise}\n   */\n  static deleteDatabase(name) {\n    return requestToPromise(window.indexedDB.deleteDatabase(name));\n  }\n\n  /**\n   * Creates a new indexeddb database with the given name.\n   */\n  constructor(name) {\n    super();\n    this.name = name;\n    this.db = null;\n    this.current = null;\n    this._versionMap = {};\n    this._versionHandlers = {};\n    this._onStorage = null;\n  }\n\n  /**\n   * Defines a version for the database. Additional versions may be added, but existing version should not be changed.\n   * @param  {Number} version           The version number\n   * @param  {Object} stores            An object with store name as the key and a comma-delimited string of indexes\n   * @param  {Function} upgradeFunction An optional function that will be called when upgrading, used for data updates\n   * @return {BrowserDB}                A reference to itself\n   */\n  version(version, stores, upgradeFunction) {\n    this._versionMap[version] = stores;\n    if (upgradeFunction) {\n      this._versionHandlers[version] = upgradeFunction;\n    }\n    return this;\n  }\n\n  /**\n   * Whether this database is open or closed.\n   * @return {Boolean}\n   */\n  isOpen() {\n    return Boolean(this.db);\n  }\n\n  /**\n   * Open a database, call this after defining versions.\n   * @return {Promise}\n   */\n  open() {\n    if (!Object.keys(this._versionMap).length) {\n      return Promise.reject(new Error('Must declare at least a version 1 schema for BrowserDB'));\n    }\n    let version = Object.keys(this._versionMap).map(key => parseInt(key)).sort((a, b) => a - b).pop();\n    return new Promise((resolve, reject) => {\n      let request = window.indexedDB.open(this.name, version);\n      request.onsuccess = successHandler(resolve);\n      request.onerror = errorHandler(reject);\n      request.onupgradeneeded = event => {\n        this.db = request.result;\n        this.db.onerror = errorHandler(reject);\n        this.db.onabort = errorHandler(() => reject(new Error('Abort')));\n        let oldVersion = event.oldVersion > Math.pow(2, 62) ? 0 : event.oldVersion; // Safari 8 fix.\n        upgrade(oldVersion, request.transaction, this.db, this._versionMap, this._versionHandlers);\n      };\n    }).then(db => {\n      this.db = db;\n      this.dispatchEvent('open');\n      onOpen(this);\n    });\n  }\n\n  /**\n   * Closes the databse.\n   */\n  close() {\n    if (!this.db) return;\n    this.db.close();\n    onClose(this);\n  }\n\n  /**\n   * Starts a multi-store transaction. All store methods after calling this will be part of this transaction until\n   * the next tick or until calling commitTransaction().\n   * @param  {Array} storeNames  Array of all the store names which will be used within this transaction\n   * @param  {String} mode       The mode, defaults to readwrite unlike the indexedDB API\n   * @return {Promise}           A promise which is resolved once the transaction is complete\n   */\n  start(storeNames, mode = 'readwrite') {\n    if (!storeNames) storeNames = this.db.objectStoreNames;\n    this.current = this.db.transaction(safariMultiStoreFix(storeNames), mode);\n    return this.current.promise = requestToPromise(this.current).then(result => {\n      this.current = null;\n      return result;\n    }, err => {\n      this.current = null;\n      return Promise.reject(err);\n    });\n  }\n\n  /**\n   * Finishes a started transaction so that other transactions may be run. This is not needed for a transaction to run,\n   * but it allows other transactions to be run in this thread. It ought to be called to avoid conflicts with other\n   * code elsewhere.\n   * @return {Promise} The same promise returned by start() which will resolve once the transaction is done.\n   */\n  commit() {\n    if (!this.current) throw new Error('There is no current transaction to commit.');\n    let promise = this.current.promise;\n    this.current = null;\n    return promise;\n  }\n\n  /**\n   * Dispatches a change event when an object is being added, saved, or deleted. When deleted, the object will be null.\n   * @param {ObjectStore} store  The object store this object is stored in\n   * @param {Object}      obj    The object being modified or null if the object is deleted\n   * @param {mixed}       key    The key of the object being changed or deleted\n   * @param {String}      from   The source of this event, whether it was from the 'local' window or a 'remote' window\n   */\n  dispatchChange(store, obj, key, from = 'local') {\n    this.dispatchEvent('change', store.name, obj, key, from);\n    store.dispatchEvent('change', obj, key, from);\n    if (from === 'local') {\n      let itemKey = `browserDB/${this.name}/${store.name}`;\n      localStorage.setItem(itemKey, key);\n      localStorage.removeItem(itemKey);\n    }\n  }\n\n}\n\n\n/**\n * An abstraction on object stores, allowing to more easily work with them without needing to always explicitly create a\n * transaction first. Also helps with ranges and indexes and promises.\n */\nclass ObjectStore extends EventDispatcher {\n\n  constructor(db, name, keyPath) {\n    super();\n    this.db = db;\n    this.name = name;\n    this.keyPath = keyPath;\n  }\n\n  _trans(mode, index) {\n    let trans = this.db.current || this.db.db.transaction(this.name, mode);\n    let store = trans.objectStore(this.name);\n    if (index) return store.index(index);\n    return store;\n  }\n\n  /**\n   * Get an object from the store by its primary key\n   * @param  {mixed} id The key of the object being retreived\n   * @return {Promise}  Resolves with the object being retreived\n   */\n  get(key) {\n    return requestToPromise(this._trans('readonly').get(key));\n  }\n\n  /**\n   * Get all objects in this object store. To get only a range, use where()\n   * @return {Promise} Resolves with an array of objects\n   */\n  getAll() {\n    return requestToPromise(this._trans('readonly').getAll());\n  }\n\n  /**\n   * Adds an object to the store. If an object with the given key already exists, it will not overwrite it.\n   * @param {Object} obj The object you want to add to the store\n   * @param {mixed} key Optional, the key of the object when it is not part of the object fields\n   * @return {Promise}\n   */\n  add(obj, key) {\n    return requestToPromise(this._trans('readwrite').add(obj, key)).then(key => {\n      this.db.dispatchChange(this, obj, key);\n    });\n  }\n\n  /**\n   * Adds an array of objects to the store in once transaction. You can also call startTransaction and use add().\n   * @param {Array} array The array of objects you want to add to the store\n   * @return {Promise}\n   */\n  bulkAdd(array) {\n    let trans = this._trans('readwrite');\n    return Promise.all(array.map(obj => {\n      return requestToPromise(trans.add(obj)).then(key => {\n        this.db.dispatchChange(this, obj, key);\n      })\n    }));\n  }\n\n  /**\n   * Saves an object to the store. If an object with the given key already exists, it will overwrite it.\n   * @param {Object} obj The object you want to add to the store\n   * @param {mixed} key Optional, the key of the object when it is not part of the object fields\n   * @return {Promise}\n   */\n  put(obj, key) {\n    return requestToPromise(this._trans('readwrite').put(obj, key)).then(key => {\n      this.db.dispatchChange(this, obj, key);\n    });\n  }\n\n  /**\n   * Saves an array of objects to the store in once transaction. You can also call startTransaction and use put().\n   * @param {Array} array The array of objects you want to save to the store\n   * @return {Promise}\n   */\n  bulkPut(array) {\n    let trans = this._trans('readwrite');\n    return Promise.all(array.map(obj => {\n      return requestToPromise(trans.put(obj)).then(key => {\n        this.db.dispatchChange(this, obj, key);\n      });\n    }));\n  }\n\n  /**\n   * Deletes an object from the store.\n   * @param {mixed} key The key of the object to delete.\n   * @return {Promise}\n   */\n  delete(key) {\n    return requestToPromise(this._trans('readwrite').delete(key)).then(() => {\n      this.db.dispatchChange(this, null, key);\n    });\n  }\n\n  /**\n   * Deletes an object from the store.\n   * @param {mixed} key The key of the object to delete.\n   * @return {Promise}\n   */\n  deleteAll() {\n    return this.where().deleteAll();\n  }\n\n  /**\n   * Use to get a subset of items from the store by id or index. Returns a Where object to allow setting the range and\n   * limit.\n   * @param  {String} field The key or index that will be used to retreive the range of objects\n   * @return {Where}        A Where instance associated with this object store\n   */\n  where(field) {\n    return new Where(this, field === this.keyPath ? '' : field);\n  }\n}\n\n\n/**\n * Helps with a ranged getAll or openCursor by helping to create the range and providing a nicer API with returning a\n * promise or iterating through with a callback.\n */\nclass Where {\n  constructor(store, index) {\n    this.store = store;\n    this.index = index;\n    this._upper = undefined;\n    this._lower = undefined;\n    this._upperOpen = false;\n    this._lowerOpen = false;\n    this._value = undefined;\n    this._limit = undefined;\n  }\n\n  /**\n   * Set greater than the value provided.\n   * @param  {mixed} value The lower bound\n   * @return {Where}       Reference to this\n   */\n  gt(value) {\n    this._lower = value;\n    this._lowerOpen = true;\n    return this;\n  }\n\n  /**\n   * Set greater than or equal to the value provided.\n   * @param  {mixed} value The lower bound\n   * @return {Where}       Reference to this\n   */\n  gte(value) {\n    this._lower = value;\n    this._lowerOpen = false;\n    return this;\n  }\n\n  /**\n   * Set less than the value provided.\n   * @param  {mixed} value The upper bound\n   * @return {Where}       Reference to this\n   */\n  lt(value) {\n    this._upper = value;\n    this._upperOpen = true;\n    return this;\n  }\n\n  /**\n   * Set less than or equal to the value provided.\n   * @param  {mixed} value The upper bound\n   * @return {Where}       Reference to this\n   */\n  lte(value) {\n    this._upper = value;\n    this._upperOpen = false;\n    return this;\n  }\n\n  /**\n   * Set the exact match, no range.\n   * @param  {mixed} value The value that needs matching on\n   * @return {Where}       Reference to this\n   */\n  equals(value) {\n    this._value = value;\n    return this;\n  }\n\n  /**\n   * Sets the upper and lower bounds to match any string starting with this prefix.\n   * @param  {String} prefix The string prefix\n   * @return {Where}         Reference to this\n   */\n  startsWith(prefix) {\n    return this.gte(prefix).lte(prefix + maxString);\n  }\n\n  /**\n   * Limit the return results to the given count.\n   * @param  {Number} count The max number of objects to return\n   * @return {Where}        Reference to this\n   */\n  limit(count) {\n    this._limit = count;\n    return this;\n  }\n\n  /**\n   * Converts this Where to its IDBKeyRange equivalent.\n   * @return {IDBKeyRange} The range this Where represents\n   */\n  toRange() {\n    if (this._upper !== undefined && this._lower !== undefined) {\n      return IDBKeyRange.bound(this._lower, this._upper, this._lowerOpen, this._upperOpen);\n    } else if (this._upper !== undefined) {\n      return IDBKeyRange.upperBound(this._upper, this._upperOpen);\n    } else if (this._lower !== undefined) {\n      return IDBKeyRange.lowerBound(this._lower, this._lowerOpen);\n    } else if (this._value !== undefined) {\n      return IDBKeyRange.only(this._value);\n    }\n  }\n\n  /**\n   * Get all the objects matching the range limited by the limit.\n   * @return {Promise} Resolves with an array of objects\n   */\n  getAll() {\n    let range = this.toRange();\n    return requestToPromise(this.store._trans('readonly', this.index).getAll(range, this._limit));\n  }\n\n  /**\n   * Gets a single object, the first one matching the criteria\n   * @return {Promise} Resolves with an object or undefined if none was found\n   */\n  get() {\n    return this.limit(1).getAll().then(result => result.shift());\n  }\n\n  /**\n   * Deletes all the objects within this range.\n   * @return {Promise} Resolves without result when finished\n   */\n  deleteAll() {\n    // Uses a cursor to delete so that each item can get a change event dispatched for it\n    return this.map((object, cursor) => {\n      let key = cursor.primaryKey;\n      return requestToPromise(cursor.delete()).then(() => {\n        this.store.db.dispatchChange(this.store, null, key);\n      });\n    }, 'readwrite').then(promises => Promise.all(promises)).then(() => {});\n  }\n\n  /**\n   * Updates objects using a cursor to update many objects at once matching the range.\n   * @param  {Function} iterator A function which will be called for each object and which should return the new value\n   * for the object, undefined if no changes should be made, or null if the object should be deleted.\n   * @return {Promise}           Resolves without result when finished\n   */\n  update(iterator) {\n    return this.map((object, cursor) => {\n      let key = cursor.primaryKey;\n      let newValue = iterator(object, cursor);\n      if (newValue === null) {\n        return requestToPromise(cursor.delete()).then(() => {\n          this.store.db.dispatchChange(this.store, null, key);\n        });\n      } else if (newValue !== undefined) {\n        return requestToPromise(cursor.update(newValue)).then(() => {\n          this.store.db.dispatchChange(this.store, newValue, key);\n        });\n      } else {\n        return undefined;\n      }\n    }, 'readwrite').then(promises => Promise.all(promises)).then(() => {});\n  }\n\n  /**\n   * Uses a cursor to efficiently iterate over the objects matching the range calling the iterator for each one.\n   * @param  {Function} iterator A function which will be called for each object with the (object, cursor) signature\n   * @return {Promise}           Resolves without result when the cursor has finished\n   */\n  forEach(iterator, mode = 'readonly', direction = 'next') {\n    return new Promise((resolve, reject) => {\n      let range = this.toRange();\n      let request = this.store._trans(mode, this.index).openCursor(range, direction);\n      request.onsuccess = event => {\n        var cursor = event.target.result;\n        if (cursor) {\n          iterator(cursor.value, cursor);\n          cursor.continue();\n        } else {\n          resolve(event.target.result);\n        }\n      };\n      request.onerror = errorHandler(reject);\n    });\n  }\n\n  /**\n   * Uses a cursor to efficiently iterate over the objects matching the range calling the iterator for each one.\n   * @param  {Function} iterator A function which will be called for each object with the (object, cursor) signature\n   * @return {Promise}           Resolves with an array which is the return result of each iteration\n   */\n  map(iterator, mode = 'readonly', direction = 'next') {\n    let results = [];\n    return this.forEach((object, cursor) => {\n      results.push(iterator(object, cursor));\n    }, mode, direction).then(() => results);\n  }\n}\n\n\n\nfunction requestToPromise(request) {\n  return new Promise((resolve, reject) => {\n    request.onerror = errorHandler(reject);\n    if (request.onsuccess === null) request.onsuccess = successHandler(resolve);\n    if (request.oncomplete === null) request.oncomplete = successHandler(resolve);\n    if (request.onabort === null) request.onabort = errorHandler(() => reject(new Error('Abort')));\n  });\n}\n\nfunction successHandler(resolve) {\n  return event => resolve(event.target.result);\n}\n\nfunction errorHandler(reject) {\n  return event => reject(event.target.error);\n}\n\nfunction safariMultiStoreFix(storeNames) {\n  return storeNames.length === 1 ? storeNames[0] : storeNames;\n}\n\n\nfunction upgrade(oldVersion, transaction, db, versionMap, versionHandlers) {\n  let versions = Object.keys(versionMap).map(key => parseInt(key)).sort((a, b) => a - b);\n  versions.forEach(version => {\n    if (oldVersion < version) {\n      let stores = versionMap[version];\n      Object.keys(stores).forEach(name => {\n        let value = stores[name];\n        let indexes = value && value.split(/\\s*,\\s*/);\n        let store;\n\n        if (value === null) {\n          db.deleteObjectStore(name);\n          return;\n        }\n\n        if (db.objectStoreNames.contains(name)) {\n          store = transaction.objectStore(name);\n        } else {\n          let keyPath = indexes.shift();\n          let storeOptions = {};\n          if (keyPath.slice(0, 2) === '++') {\n            keyPath = keyPath.replace('++', '');\n            storeOptions.autoIncrement = true;\n          }\n          if (keyPath) storeOptions.keyPath = keyPath;\n          store = db.createObjectStore(name, storeOptions);\n        }\n\n        indexes.forEach(name => {\n          if (!name) return;\n          if (name[0] === '-') return store.deleteIndex(name.slice(1));\n\n          let options = {};\n\n          if (name[0] === '&') {\n            name = name.slice(1);\n            options.unique = true;\n          } else if (name[0] === '*') {\n            name = name.slice(1);\n            options.multiEntry = true;\n          }\n          store.createIndex(name, name, options);\n        });\n      });\n\n      let handler = versionHandlers[version];\n      if (handler) handler(oldVersion, transaction);\n    }\n  })\n}\n\n\nfunction onOpen(browserDB) {\n  // Store keyPath's for each store\n  let keyPaths = {};\n  let versions = Object.keys(browserDB._versionMap).map(key => parseInt(key)).sort((a, b) => a - b);\n  versions.forEach(version => {\n    let stores = browserDB._versionMap[version];\n    Object.keys(stores).forEach(name => {\n      if (keyPaths[name] || !stores[name]) return;\n      let indexes = stores[name].split(/\\s*,\\s*/);\n      keyPaths[name] = indexes[0].replace(/^\\+\\+/, '');\n    });\n  });\n\n  let db = browserDB.db;\n\n  db.onversionchange = event => {\n    if (browserDB.dispatchCancelableEvent('versionchange')) {\n      if (event.newVersion > 0) {\n        console.warn(`Another connection wants to upgrade database '${this.name}'. Closing db now to resume the upgrade.`);\n      } else {\n        console.warn(`Another connection wants to delete database '${this.name}'. Closing db now to resume the delete request.`);\n      }\n      browserDB.close();\n    }\n  };\n  db.onblocked = event => {\n    if (browserDB.dispatchCancelableEvent('blocked')) {\n      if (!event.newVersion || event.newVersion < event.oldVersion) {\n        console.warn(`BrowserDB.delete('${browserDB.name}') was blocked`);\n      } else {\n        console.warn(`Upgrade '${browserDB.name}' blocked by other connection holding version ${event.oldVersion}`);\n      }\n    }\n  };\n  db.onclose = () => onClose(browserDB);\n  db.onerror = event => browserDB.dispatchEvent('error', event.target.error);\n  const prefix = `browserDB/${browserDB.name}/`;\n  browserDB._onStorage = event => {\n    if (event.newValue && event.key.slice(0, prefix.length) === prefix) {\n      try {\n        let storeName = event.key.replace(prefix, '');\n        let key = event.newValue;\n        let store = browserDB[storeName];\n        if (store) {\n          store.get(key).then((object = null) => {\n            browserDB.dispatchChange(store, object, key, 'remote');\n          });\n        } else {\n          console.warn(`A change event came from another tab for store \"${storeName}\", but no such store exists.`);\n        }\n      } catch (err) {\n        console.warn('Error parsing object change from browserDB:', err);\n      }\n    }\n  };\n\n  window.addEventListener('storage', browserDB._onStorage);\n\n  let names = db.objectStoreNames;\n  for (let i = 0; i < names.length; i++) {\n    let name = names[i];\n    browserDB[name] = new ObjectStore(browserDB, name, keyPaths[name]);\n  }\n}\n\n\nfunction onClose(browserDB) {\n  window.removeEventListener('storage', browserDB._onStorage);\n  browserDB.db = null;\n  browserDB.dispatchEvent('close');\n}\n"],"names":["slice","Array","prototype","EventDispatcher","defineProperty","configurable","writable","value","type","listener","_events","getEventListeners","concat","on","wrap","off","apply","arguments","filter","l","args","call","forEach","every","obj","listeners","maxString","String","fromCharCode","BrowserDB","deleteDatabase","name","requestToPromise","window","indexedDB","db","current","_versionMap","_versionHandlers","_onStorage","version","stores","upgradeFunction","Boolean","Object","keys","length","Promise","reject","Error","map","key","parseInt","sort","a","b","pop","resolve","request","open","onsuccess","successHandler","onerror","errorHandler","onupgradeneeded","event","result","onabort","oldVersion","Math","pow","transaction","then","dispatchEvent","close","storeNames","mode","objectStoreNames","safariMultiStoreFix","promise","err","store","from","itemKey","setItem","removeItem","ObjectStore","keyPath","index","trans","objectStore","_trans","get","getAll","add","dispatchChange","array","all","put","delete","where","deleteAll","field","Where","_upper","undefined","_lower","_upperOpen","_lowerOpen","_value","_limit","prefix","gte","lte","count","IDBKeyRange","bound","upperBound","lowerBound","only","range","toRange","limit","shift","object","cursor","primaryKey","promises","iterator","newValue","update","direction","openCursor","target","continue","results","push","oncomplete","error","upgrade","versionMap","versionHandlers","versions","indexes","split","deleteObjectStore","contains","storeOptions","replace","autoIncrement","createObjectStore","deleteIndex","options","unique","multiEntry","createIndex","handler","onOpen","browserDB","keyPaths","onversionchange","dispatchCancelableEvent","newVersion","warn","onblocked","onclose","onClose","storeName","addEventListener","names","i","removeEventListener"],"mappings":"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"}